/*
 * Copyright (C) 2003-2014  Pascal Essiembre
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.essiembre.eclipse.rbe.model.workbench;

/**
 * Application preferences, relevant to the resource bundle editor plugin.
 * 
 * @author Pascal Essiembre
 */
public final class XRBEPreferences
{
    /** New Line Type: UNIX. */
    public static final int NEW_LINE_UNIX = 0;
    /** New Line Type: Windows. */
    public static final int NEW_LINE_WIN = 1;
    /** New Line Type: Mac. */
    public static final int NEW_LINE_MAC = 2;

    /**
     * Gets whether to convert encoded strings to unicode characters when
     * reading file.
     * 
     * @return <code>true</code> if converting
     */
    public static boolean getConvertEncodedToUnicode()
    {
        return true;
    }

    // --- Formatting
    // -----------------------------------------------------------

    /**
     * Gets key group separator.
     * 
     * @return key group separator.
     */
    public static String getKeyGroupSeparator()
    {
        return ".";
    }

    /**
     * Gets whether pressing tab inserts a tab in a field.
     * 
     * @return <code>true</code> if pressing tab inserts a tab in a field
     */
    public static boolean getFieldTabInserts()
    {
        return true;
    }

    /**
     * Gets whether equals signs should be aligned when generating file.
     * 
     * @return <code>true</code> if equals signs should be aligned
     */
    public static boolean getAlignEqualSigns()
    {
        return true;
    }

    /**
     * Gets whether there should be spaces around equals signs when generating
     * file.
     * 
     * @return <code>true</code> there if should be spaces around equals signs
     */
    public static boolean getSpacesAroundEqualSigns()
    {
        return true;
    }

    /**
     * Gets whether keys should be grouped when generating file.
     * 
     * @return <code>true</code> if keys should be grouped
     */
    public static boolean getGroupKeys()
    {
        return true;
    }

    /**
     * Gets how many level deep keys should be grouped when generating file.
     * 
     * @return how many level deep
     */
    public static int getGroupLevelDepth()
    {
        return 1;
    }

    /**
     * Gets how many blank lines should separate groups when generating file.
     * 
     * @return how many blank lines between groups
     */
    public static int getGroupLineBreaks()
    {
        return 1;
    }

    /**
     * Gets whether equal signs should be aligned within each groups when
     * generating file.
     * 
     * @return <code>true</code> if equal signs should be aligned within groups
     */
    public static boolean getGroupAlignEqualSigns()
    {
        return true;
    }

    /**
     * Gets whether to print "Generated By..." comment when generating file.
     * 
     * @return <code>true</code> if we print it
     */
    public static boolean getShowGenerator()
    {
        return false;
    }

    /**
     * Gets the number of character after which lines should be wrapped when
     * generating file.
     * 
     * @return number of characters
     */
    public static int getWrapCharLimit()
    {
        return 80;
    }

    /**
     * Gets the number of spaces to use for indentation of wrapped lines when
     * generating file.
     * 
     * @return number of spaces
     */
    public static int getWrapIndentSpaces()
    {
        return 8;
    }

    /**
     * Gets whether lines should be wrapped if too big when generating file.
     * 
     * @return <code>true</code> if wrapped
     */
    public static boolean getWrapLines()
    {
        return false;
    }

    /**
     * Gets whether wrapped lines should be aligned with equal sign when
     * generating file.
     * 
     * @return <code>true</code> if aligned
     */
    public static boolean getWrapAlignEqualSigns()
    {
        return true;
    }

    /**
     * Gets whether to escape unicode characters when generating file.
     * 
     * @return <code>true</code> if escaping
     */
    public static boolean getConvertUnicodeToEncoded()
    {
        return true;
    }

    /**
     * Gets whether escaped unicode "alpha" characters should be uppercase when
     * generating file.
     * 
     * @return <code>true</code> if uppercase
     */
    public static boolean getConvertUnicodeToEncodedUpper()
    {
        return true;
    }

    /**
     * Gets the new line type to use when overwriting system (or Eclipse)
     * default new line type when generating file. Use constants to this effect.
     * 
     * @return new line type
     */
    public static int getNewLineType()
    {
        return NEW_LINE_UNIX;
    }

    /**
     * Gets whether new lines are escaped or printed as is when generating file.
     * 
     * @return <code>true</code> if printed as is.
     */
    public static boolean getNewLineNice()
    {
        return false;
    }

    /**
     * Gets whether to keep empty fields.
     * 
     * @return <code>true</code> if empty fields are to be kept.
     */
    public static boolean getKeepEmptyFields()
    {
        return false;
    }

    /**
     * Gets whether we want to overwrite system (or Eclipse) default new line
     * type when generating file.
     * 
     * @return <code>true</code> if overwriting
     */
    public static boolean getForceNewLineType()
    {
        return false;
    }
}
